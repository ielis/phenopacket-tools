# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to GitHub Pages

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Runs on pushes targeting the main branch
  push:
    branches: [ main ]

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # otherwise, you will fail to push refs to dest repo
        ref: main
    
    - name: Set up Python 3.
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install Python dependencies
      run: |
        pip install sphinx
        pip install sphinx-rtd-theme

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'
    
    - name: Build phenopacket-tools
      run: ./mvnw -Prelease -DskipTests package # We test elsewhere

    - name: Generate examples and build documentation
      run: |
        ## Init the target folder. 
        # We will put all site documentation there.
        mkdir -p gh-pages
        touch gh-pages/.nojekyll
        
        ## Copy Javadoc
        # Copy aggregated Javadoc into `apidocs` folder. 
        # The aggregated docs are built by Maven in `package` phase.
        printf "Copying Javadocs from %s to %s\n" $(pwd)/target/site/apidocs $(pwd)/gh-pages/apidocs
        cp -r target/site/apidocs ./gh-pages/apidocs 
        
        ## Generate examples
        # Find the CLI jar and run the `examples` command.
        jar=$(find phenopacket-tools-cli/target \
          -regextype posix-extended \
          -regex ".*[0-9]+\.[0-9]+\.[0-9]+(-RC[1-9][0-9]*)?\.jarr$")
        if [ -f "${jar}" ]; then
          printf "Generating Phenopacket examples using ${jar}\n"
          java -jar ${jar} examples -v --output-directory ./gh-pages/examples
        else
          printf "Could not find phenopacket-tools JAR file\n"
          exit 1
        fi
        
        ## Build the docs
        # Generate the HTML pages and move the generated content into the target folder.
        printf "Building the documentation\n"
        cd docs/ 
        make html
        mv _build/html/* ../gh-pages/
        cd ..


    - name: Deploy documentation.
      if: ${{ github.event_name == 'push' }}
      uses: JamesIves/github-pages-deploy-action@v4.4.1
      with:
        branch: gh-pages
        force: true
        folder: gh-pages


